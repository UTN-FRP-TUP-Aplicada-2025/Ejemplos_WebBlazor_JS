@page "/demo-google-maps"

@rendermode InteractiveServer
@attribute [StreamRendering]

<h3>Demo</h3>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">

                    <!-- Localidad -->
                    <div class="mb-3">
                        <label class="form-label">Localidad</label>
                        <InputSelect class="form-select" @bind-Value="localidad.Id" @bind-Value:after="OnDireccionChanged">
                            <option value="0">Elija una localidad</option>
                            @foreach (var localidad in localidades)
                            {
                                <option value="@localidad.Id">@localidad.Descripcion</option>
                            }
                        </InputSelect>
                    </div>

                    <!-- Calle y Número -->
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label">Calle</label>
                            <InputText class="form-control" @bind-Value="domicilio.Calle" @bind-Value:after="OnDireccionChanged" />
                        </div>
                        <div class="col">
                            <label class="form-label">Número</label>
                            <InputText class="form-control" @bind-Value="domicilio.Numero" @bind-Value:after="OnDireccionChanged" />
                        </div>
                    </div>

                    <!-- Coordenadas -->
                    <div class="mb-3">
                        <label class="form-label">Coordenadas</label>
                        <div>@($"{domicilio.Lat}, {domicilio.Lng}")</div>
                    </div>

                </div>
            </div>

            <!-- Mapa -->
            <div id="map" style="height: 400px; width: 100%; margin-top: 20px;"></div>
        </div>
    </div>
</div>

@code 
{
    @inject IConfiguration Configuration


    #region models instances
    LocalidadViewModel localidad = new();
    DomicilioViewModel domicilio = new();

    List<LocalidadViewModel> localidades = new()
    {
        new LocalidadViewModel{ Id=1, Descripcion="Paraná, Entre Ríos, Argentina"},
        new LocalidadViewModel{ Id=2, Descripcion="Santa Fé, Santa Fé, Argentina"},
        new LocalidadViewModel{ Id=3, Descripcion="Rosario, Santa Fé, Argentina"}
    };

    #endregion

    async Task OnDireccionChanged()
    {
        domicilio.Localidad = (from l in localidades where l.Id == localidad.Id select l)?.FirstOrDefault();

        await SetDireccionMaps();
    }


    #region JS


    [Inject] IJSRuntime _JS { get; set; } = default!;
    DotNetObjectReference<DemoGoogleMaps>? dotNetObjectReference;
    IJSObjectReference? jsObjectReference;

    bool isInitialized = false;

    async protected Task InitializeJS()
    {
        try
        {
            string apikey = Configuration["GOOGLE_MAPS_API_KEY"];
            dotNetObjectReference ??= DotNetObjectReference.Create(this);        
            jsObjectReference = await _JS.InvokeAsync<IJSObjectReference>("import", "./js/googlemaps/main.js?v=77");
            if (jsObjectReference != null)
                isInitialized = await jsObjectReference.InvokeAsync<bool>("InitializeMapsBlazor", 
                                        dotNetObjectReference,
                                        "map", apikey,
                                        13, domicilio.DireccionMaps());
        }
        catch (Exception ex)
        { }
    }

    async public Task SetDireccionMaps()
    {
        try
        {
            if (jsObjectReference != null && domicilio.Localidad != null)
                await jsObjectReference.InvokeVoidAsync("SetDireccion", "map", domicilio.DireccionMaps());
        }
        catch (Exception ex)
        { }
    }

    #endregion

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await InitializeJS();
    }

    #region models

    class LocalidadViewModel
    {
        public int? Id { get; set; }
        public string? Descripcion { get; set; }
    }

    class DomicilioViewModel
    {
        LocalidadViewModel? localidad;
        public LocalidadViewModel? Localidad 
        {
            get
            {
                return localidad;   
            }
            set
            {
                if (localidad?.Id != value?.Id)
                {
                    localidad = value;
                    Calle = null;                   
                }
            }
        }

        string? calle;
        public string? Calle 
        {
            get
            {
                return calle;    
            }
            set
            {
                if(calle!=value)
                {
                    calle = value;
                    Numero = null;
                }
            }
        }

        public string? numero;
        public string? Numero
        {
            get
            {
                return numero;
            }
            set
            {
                if (calle != value)
                {
                    numero = value;
                    Lat = 0;
                    Lng = 0;
                }
            }
        }

        public double Lat { get; set; }
        public double Lng { get; set; }

        public string DireccionMaps()
        {
            if (localidad != null)
                return $"{calle} {numero}, {localidad?.Descripcion}";
            return "";
        }
    }

    #endregion

    [JSInvokable]
    async public Task OnMarkerDragOut(MarkerPosition coordenada)
    {
        await InvokeAsync(() =>
        {
            domicilio.Lat = coordenada.lat;
            domicilio.Lng = coordenada.lng;
            StateHasChanged();
        });
    }

    public class MarkerPosition
    {
        public double lat { get; set; }
        public double lng { get; set; }
    }
}
